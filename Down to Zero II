#we should have to find the minimum number of moves to reduce N to zero using the constraints given

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'downToZero' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER n as parameter.
#

def downToZero(n):
    # Write your code here
    a = n
    list5=[]
    def func1(a):
        list1=[]
        list2=[]
        for i in range(a-1,1,-1):
            if a%i==0:
                b=[i]+[a//i]
                b = sorted(b)
                if b not in list1:
                    list1.append(b)
        if len(list1) != 0:
            for j in list1:
                m = max(j)
                list2.append(m)
            d = min(list2)
            return d
        else:
            return a-1
    
    while True:
        z = func1(a)
        list5.append(z)
        if z == 0:
            break
        elif z == -1:
            list5=[]
            break
        else:
            a = list5[-1]
            continue
    return len(list5)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    q = int(input().strip())

    for q_itr in range(q):
        n = int(input().strip())

        result = downToZero(n)

        fptr.write(str(result) + '\n')

    fptr.close()

#Explanation:

#The main function downToZero takes an integer n as input and initializes some variables, including an empty list list5 to store results.

#The nested function func1(a) is defined to find factors of a and return the minimum of the maximum values of these factors. If there are no factors, it returns a-1.

#The main loop continues until z becomes 0. In each iteration, it calculates z using func1(a), appends it to list5, and updates the value of a with the latest value in list5.

#The loop breaks when z becomes 0. If z is -1 at any point, it resets list5 and breaks the loop.

#The function finally returns the length of list5, which represents the number of steps taken to reach 0.

#The code uses a recursive approach to find factors and gradually reduces the input n to 0 based on certain conditions. The logic seems to be focused on finding factors and minimizing the value in each step.

----------------  it passes only 2 test cases ---------------------------

-------------- below code passes the all test cases --------------------------------

import sys

# Function to generate the sieve of Eratosthenes
def generate_sieve():
    # Set the limit to 10^6 + 1
    limit = pow(10, 6) + 1
    
    # Initialize the sieve with default values
    sieve = [-1] * limit
    
    # Set initial values for 0, 1, 2, and 3
    sieve[0], sieve[1], sieve[2], sieve[3] = 0, 1, 2, 3

    # Iterate over the range of numbers up to the limit
    for iind in range(limit):
        # If the current value in the sieve is not initialized or greater than the previous value + 1,
        # set it to the previous value + 1
        if sieve[iind] == -1 or sieve[iind] > sieve[iind - 1] + 1:
            sieve[iind] = sieve[iind - 1] + 1
            
        # Initialize jind to 1
        jind = 1
        
        # Update the sieve values for multiples of the current index (iind)
        while jind <= iind and jind * iind < limit:
            # If the sieve value at the multiple position is not initialized or greater than the current value + 1,
            # set it to the current value + 1
            if sieve[jind * iind] == -1 or sieve[jind * iind] > sieve[iind] + 1:
                sieve[jind * iind] = sieve[iind] + 1
            jind += 1
    
    return sieve

# Entry point of the program
if __name__ == "__main__":
    # Read the number of queries
    Q = int(input().strip())
    
    # Generate the sieve
    sieve = generate_sieve()

    # Process each query
    for a0 in range(Q):
        # Read the value N for the current query
        N = int(input().strip())
        
        # Print the result from the precomputed sieve
        print(sieve[N])


#Explanation:

#The generate_sieve function generates the sieve of Eratosthenes up to a specified limit (10^6 + 1 in this case).

#The sieve is represented by a list named sieve, where each index corresponds to a number, and the value at that index represents the minimum number of steps to reduce that number to 1.

#The main loop iterates over the range of queries (Q), and for each query, it reads the input value N and prints the precomputed result from the sieve.

#The code efficiently precomputes and stores the minimum number of steps to reduce each number to 1 using the sieve of Eratosthenes.
