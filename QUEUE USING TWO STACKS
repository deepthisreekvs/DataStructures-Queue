# Enter your code here. Read input from STDIN. Print output to STDOUT

#written the code from here

# Define a class for a queue using two stacks
class QueueWithTwoStacks:
    def __init__(self):
        # Initialize two stacks for enqueue and dequeue operations
        self.enqueue_stack = []
        self.dequeue_stack = []

    # Transfer elements from enqueue stack to dequeue stack
    def transfer_elements(self):
        while self.enqueue_stack:
            self.dequeue_stack.append(self.enqueue_stack.pop())

    # Enqueue operation: Add an element to the enqueue stack
    def enqueue(self, x):
        self.enqueue_stack.append(x)

    # Dequeue operation: Pop an element from the front of the queue
    def dequeue(self):
        # If dequeue stack is empty, transfer elements from enqueue to dequeue stack
        if not self.dequeue_stack:
            self.transfer_elements()
        return self.dequeue_stack.pop()

    # Peek operation: Return the front element of the queue without removing it
    def peek(self):
        # If dequeue stack is empty, transfer elements from enqueue to dequeue stack
        if not self.dequeue_stack:
            self.transfer_elements()
        return self.dequeue_stack[-1]

# Read the number of queries
q = int(input())

# Create a queue using the defined class
queue = QueueWithTwoStacks()

# Process each query
for _ in range(q):
    # Read and split the query
    query = input().split()
    query_type = int(query[0])

    # Perform the appropriate operation based on the query type
    if query_type == 1:
        # Enqueue operation
        x = int(query[1])
        queue.enqueue(x)
    elif query_type == 2:
        # Dequeue operation
        queue.dequeue()
    elif query_type == 3:
        # Print operation: Print the front element of the queue
        print(queue.peek())
